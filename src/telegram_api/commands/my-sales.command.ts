import { Telegraf } from 'telegraf';
import { Command } from '../classes/command.class';
import { MyContext } from '../interfaces/context.interface';
import { InjectRepository } from '@nestjs/typeorm';
import { Manager } from 'src/managers/entities/manager.entity';
import { Repository } from 'typeorm';
import { TelegramApi } from '../entities/telegram_api.entity';
import { Logger } from '@nestjs/common';

export class MySalesCommand extends Command {
  private readonly logger = new Logger(MySalesCommand.name);
  public monthName: string;
  constructor(
    public client: Telegraf<MyContext>,
    @InjectRepository(Manager)
    private readonly managersRepository: Repository<Manager>,
    @InjectRepository(TelegramApi)
    private readonly telegramApiRepository: Repository<TelegramApi>,
  ) {
    super(client);
  }

  async handle(): Promise<void> {
    const month = new Date(); // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    const month_formatted = month.toISOString().split('T')[0]; // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'

    // –ú–∞—Å—Å–∏–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Å—è—Ü–µ–≤
    const monthNames = [
      '–Ø–Ω–≤–∞—Ä—å',
      '–§–µ–≤—Ä–∞–ª—å',
      '–ú–∞—Ä—Ç',
      '–ê–ø—Ä–µ–ª—å',
      '–ú–∞–π',
      '–ò—é–Ω—å',
      '–ò—é–ª—å',
      '–ê–≤–≥—É—Å—Ç',
      '–°–µ–Ω—Ç—è–±—Ä—å',
      '–û–∫—Ç—è–±—Ä—å',
      '–ù–æ—è–±—Ä—å',
      '–î–µ–∫–∞–±—Ä—å',
    ];

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –∏–∑ –¥–∞—Ç—ã
    const monthNumber = new Date(month_formatted).getMonth();

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ monthNames
    this.monthName = monthNames[monthNumber];
    this.client.hears('‚ö°–ú–æ–∏ –∑–∞–∫—Ä—ã—Ç–∏—è' || '–ú–æ–∏ –∑–∞–∫—Ä—ã—Ç–∏—è', async (ctx) => {
      const authStatus = (await this.telegramApiRepository.findOne({
        where: { chat_id: ctx.chat.id.toString() },
      }))
        ? await this.telegramApiRepository.findOne({
            where: { chat_id: ctx.chat.id.toString() },
          })
        : undefined;
      if (authStatus.authorization) {
        this.handled(ctx);
        this.client.action('personal_goal_edit', async (ctx) => {
          this.personalGoalEdit(ctx);
        });
      } else {
        ctx.reply('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, /auth');
      }
    });
    this.client.hears('‚ù§Ô∏è‚Äçüî•–ú–æ—è –∫–æ–º–∞–Ω–¥–∞', async (ctx) => {
      return this.my_command_handled(ctx);
    });

    this.client.hears('‚ö°–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
      return this.my_command_handled(ctx);
    });
  }

  async handled(ctx: MyContext) {
    this.logger.log(`${ctx.from.username} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–º–∞–Ω–¥—É "–ú–æ–∏ –∑–∞–∫—Ä—ã—Ç–∏—è"`);
    const manager = await this.telegramApiRepository.findOne({
      where: { chat_id: ctx.chat.id.toString() },
    });
    const statistics = await this.managersRepository.findOne({
      where: { name: manager.manager },
    });

    if (statistics) {
      return ctx.replyWithHTML(
        `<b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${this.monthName}</b>\n\n` +
          `–ü–ª–∞–Ω / –§–∞–∫—Ç: <b>${statistics.personal_monthly_goal} / ${statistics.monthly_sales}</b>\n` +
          `–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>${statistics.avgPayedPrice}</b>\n` +
          `–•–æ–ª–æ–¥–Ω–∞—è —Å–¥–µ–ª–∫–∞: <b>${statistics.salary}</b>\n` +
          `–ö–æ–º–∞–Ω–¥–∞: <b>${statistics.team}</b>`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–π –ø–ª–∞–Ω',
                  callback_data: 'personal_goal_edit',
                },
              ],
            ],
          },
        },
      );
    } else {
      return ctx.reply('–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç');
    }
  }

  async personalGoalEdit(ctx) {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–∏—á–Ω—ã–π –ø–ª–∞–Ω');
    const manager = await this.telegramApiRepository.findOne({
      where: { chat_id: ctx.chat.id.toString() },
    });
    this.client.hears(/^\d{7}$/, async (ctx) => {
      const status = await this.managersRepository.update(
        { name: manager.manager },
        { personal_monthly_goal: ctx.msg.text },
      );
      if (status) {
        ctx.reply('–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã\n\n/start');
        this.logger.log(
          `${ctx.from.username} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π –ª–∏—á–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ ${ctx.msg.text}`,
        );
      }
    });
  }

  async my_command_handled(ctx) {
    this.logger.log(`${ctx.from.username} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–º–∞–Ω–¥—É "–ú–æ—è –∫–æ–º–∞–Ω–¥–∞"`);
    const client = await this.telegramApiRepository.findOne({
      where: { chat_id: ctx.chat.id },
    });
    const manager = await this.managersRepository.findOne({
      where: { name: client.manager },
    });

    if (manager) {
      if (client.role === 'manager') {
        return ctx.replyWithHTML(
          `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ\n\n` +
            `<code>${manager.team}</code>\n\n` +
            `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –∑–∞ ${this.monthName}: –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è`,
        );
      }
      if (client.role === 'admin') {
        return ctx.replyWithHTML(
          `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ <b>${manager.team} –∑–∞ ${this.monthName}</b>\n\n` +
            `–û–±—ä—ë–º –ø—Ä–æ–¥–∞–∂: -\n` +
            `–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂: -\n` +
            `–ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: -\n` +
            `–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ -\n` +
            `–¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ KPI: -\n\n` +
            `–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @milesarmales`,
        );
      }
      if (client.role === 'ROP') {
        return ctx.replyWithHTML(
          `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ <b>${manager.team} –∑–∞ ${this.monthName}</b>\n\n` +
            `–û–±—ä—ë–º –ø—Ä–æ–¥–∞–∂: -\n` +
            `–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂: -\n` +
            `–ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ—Ç–¥–µ–ª–∞: -\n` +
            `–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –æ—Ç–¥–µ–ª–∞: -\n` +
            `–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂ –æ—Ç–¥–µ–ª–∞: -\n` +
            `–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏: -\n` +
            `–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª–∞: -\n` +
            `–¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ KPI: -\n\n` +
            `–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @milesarmales`,
        );
      }
    }
  }
}
