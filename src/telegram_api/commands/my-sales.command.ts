import { Telegraf } from 'telegraf';
import { Command } from '../classes/command.class';
import { MyContext } from '../interfaces/context.interface';
import { InjectRepository } from '@nestjs/typeorm';
import { Manager } from 'src/managers/entities/manager.entity';
import { In, Repository } from 'typeorm';
import { TelegramApi } from '../entities/telegram_api.entity';
import { Logger } from '@nestjs/common';
import { Sales } from 'src/sales_plan/entities/sales.entity';
import { monthNames } from './constants';

export class MySalesCommand extends Command {
  private readonly logger = new Logger(MySalesCommand.name);
  public monthName: string;
  constructor(
    public client: Telegraf<MyContext>,
    @InjectRepository(Manager)
    private readonly managersRepository: Repository<Manager>,
    @InjectRepository(TelegramApi)
    private readonly telegramApiRepository: Repository<TelegramApi>,
    @InjectRepository(Sales)
    private readonly salesRepository: Repository<Sales>,
  ) {
    super(client);
  }

  async handle(): Promise<void> {
    const month = new Date(); // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    const month_formatted = month.toISOString().split('T')[0]; // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –∏–∑ –¥–∞—Ç—ã
    const monthNumber = new Date(month_formatted).getMonth();

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ monthNames
    this.monthName = monthNames[monthNumber];
    this.client.hears('‚ö°–ú–æ–∏ –∑–∞–∫—Ä—ã—Ç–∏—è', async (ctx) => {
      const authStatus = (await this.telegramApiRepository.findOne({
        where: { chat_id: ctx.chat.id.toString() },
      }))
        ? await this.telegramApiRepository.findOne({
            where: { chat_id: ctx.chat.id.toString() },
          })
        : undefined;
      if (authStatus.authorization) {
        this.handled(ctx);
        this.client.action('personal_goal_edit', async (ctx) => {
          this.personalGoalEdit(ctx);
        });
      } else {
        ctx.reply('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, /auth');
      }
    });
    this.client.hears('‚ù§Ô∏è‚Äçüî•–ú–æ—è –∫–æ–º–∞–Ω–¥–∞', async (ctx) => {
      return this.my_command_handled(ctx);
    });

    this.client.hears('‚ö°–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
      return this.my_command_handled(ctx);
    });
  }

  async handled(ctx: MyContext) {
    this.logger.log(`${ctx.from.username} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–º–∞–Ω–¥—É "–ú–æ–∏ –∑–∞–∫—Ä—ã—Ç–∏—è"`);
    const manager = await this.telegramApiRepository.findOne({
      where: { chat_id: ctx.chat.id.toString() },
    });
    const statistics = await this.managersRepository.findOne({
      where: { name: manager.manager },
    });

    let percentageGoal;

    const perosnalMonthlyGoal = statistics.personal_monthly_goal
      ? Number(statistics.personal_monthly_goal)
      : '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    if (perosnalMonthlyGoal !== '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ') {
      percentageGoal = (statistics.monthly_sales / perosnalMonthlyGoal) * 100;
    } else {
      percentageGoal = null;
    }

    if (statistics) {
      return ctx.replyWithHTML(
        `<b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${this.monthName}</b>\n\n` +
          `–õ–∏—á–Ω—ã–π –ª–∞–Ω / –§–∞–∫—Ç: <b>${perosnalMonthlyGoal} / ${statistics.monthly_sales}</b> (${percentageGoal ? percentageGoal.toFixed(2) : 0}%)\n` +
          `–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>${statistics.avgPayedPrice}</b>\n` +
          `–ó–∞—Ä–ø–ª–∞—Ç–∞ (–±–µ–∑ –∞–≤–∞–Ω—Å–∞): <b>${statistics.salary}</b>\n` +
          `–ö–æ–º–∞–Ω–¥–∞: <b>${statistics.team}</b>`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–π –ø–ª–∞–Ω',
                  callback_data: 'personal_goal_edit',
                },
              ],
            ],
          },
        },
      );
    } else {
      return ctx.reply('–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç');
    }
  }

  async personalGoalEdit(ctx) {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–∏—á–Ω—ã–π –ø–ª–∞–Ω');
    const manager = await this.telegramApiRepository.findOne({
      where: { chat_id: ctx.chat.id.toString() },
    });
    this.client.hears(/^\d{7}$/, async (ctx) => {
      const status = await this.managersRepository.update(
        { name: manager.manager },
        { personal_monthly_goal: ctx.msg.text },
      );
      if (status) {
        ctx.reply('–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã\n\n/start');
        this.logger.log(
          `${ctx.from.username} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π –ª–∏—á–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ ${ctx.msg.text}`,
        );
      }
    });
  }

  async my_command_handled(ctx) {
    this.logger.log(`${ctx.from.username} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–º–∞–Ω–¥—É "–ú–æ—è –∫–æ–º–∞–Ω–¥–∞"`);
    const client = await this.telegramApiRepository.findOne({
      where: { chat_id: ctx.chat.id.toString() },
    });

    if (!client) {
      return ctx.replyWithHTML('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }

    const manager = await this.managersRepository.findOne({
      where: { name: client.manager },
    });

    if (!manager || !manager.team) {
      return ctx.replyWithHTML('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.');
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ —Ç–æ–π –∂–µ –∫–æ–º–∞–Ω–¥–µ
    const teamManagers = await this.managersRepository.find({
      where: { team: manager.team },
    });

    if (!teamManagers.length) {
      return ctx.replyWithHTML('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }

    const managerNames = teamManagers.map((m) => m.name);

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
    const sales = await this.salesRepository.find({
      where: { managerName: In(managerNames) },
    });

    if (!sales.length) {
      return ctx.replyWithHTML('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö.');
    }

    // –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ
    const totalSalesVolume = sales.reduce(
      (sum, sale) => sum + parseFloat(sale.profit || '0'),
      0,
    );
    const quantityOfSales = sales.length;
    const avgCheck = totalSalesVolume / quantityOfSales;

    const monthlyGoal = teamManagers.reduce(
      (sum, m) => sum + parseFloat(m.personal_monthly_goal || '0'),
      0,
    );
    const performance = monthlyGoal
      ? (totalSalesVolume / monthlyGoal) * 100
      : null;

    const teamName = manager.team;
    const monthName = '–ê–≤–≥—É—Å—Ç'; // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —ç—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞

    let replyMessage = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ <b>${teamName} –∑–∞ ${this.monthName}</b>\n\n`;
    replyMessage += `–û–±—ä—ë–º –ø—Ä–æ–¥–∞–∂: ${totalSalesVolume.toFixed(2)}\n`;
    replyMessage += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂: ${quantityOfSales}\n`;
    replyMessage += `–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${avgCheck.toFixed(2)}\n`;

    if (performance) {
      replyMessage += `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: ${performance.toFixed(2)}%\n`;
    } else {
      replyMessage += `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª—å –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º).\n`;
    }

    if (client.role === 'admin') {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
      replyMessage += `–ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è...\n`;
      replyMessage += `–¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ KPI: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö).\n`;
    }

    if (client.role === 'ROP') {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è ROP
      replyMessage += `–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è...\n`;
      replyMessage += `–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª–∞: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è...\n`;
    }

    return ctx.reply(replyMessage, { parse_mode: 'HTML' });
  }
}
