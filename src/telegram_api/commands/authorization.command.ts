import { Telegraf } from 'telegraf';
import { Command } from '../classes/command.class';
import { MyContext } from '../interfaces/context.interface';
import { InjectRepository } from '@nestjs/typeorm';
import { Manager } from 'src/managers/entities/manager.entity';
import { Repository } from 'typeorm';
import { TelegramApi } from '../entities/telegram_api.entity';

export class AuthCommand extends Command {
  constructor(
    public client: Telegraf<MyContext>,
    @InjectRepository(Manager)
    private readonly managersRepository: Repository<Manager>,
    @InjectRepository(TelegramApi)
    private readonly telegramApiRepository: Repository<TelegramApi>,
  ) {
    super(client);
  }

  async handle(): Promise<void> {
    this.client.action('auth', async (ctx) => {
      return this.handled(ctx);
    });

    this.client.command('auth', async (ctx) => {
      return this.handled(ctx);
    });

    this.client.hears('üë§–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—èüë§', async (ctx) => {
      return this.handled(ctx);
    });

    this.client.hears('üîº–°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Çüîº', async (ctx) => {
      return this.handled_out(ctx);
    });
  }

  async handled(ctx): Promise<void> {
    // ctx.reply('–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É GetCourse');
    // this.client.hears(/^[^\s@]+@[^\s@]+\.[^\s@]+$/, async (ctx) => {
    //   const authMail = ctx.msg.text;
    //   const existingClient = await this.managersRepository.findOne({
    //     where: { auth_mail: authMail },
    //   });

    //   if (existingClient) {
    //     this.telegramApiRepository.update(
    //       { username: ctx.from.username },
    //       { manager: existingClient.name, authorization: true },
    //     );
    //   }

    //   if (!existingClient) {
    //     ctx.reply('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ—á—Ç–∞. –í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é');
    //   }
    // });
    const existingClient = await this.telegramApiRepository.findOne({
      where: { chat_id: ctx.chat.id },
    });

    console.log(existingClient.manager);
    if (existingClient.manager) {
      ctx.replyWithHTML(
        `–ü—Ä–∏–≤–µ—Ç, <b>${existingClient.manager}</b>\n\n–ù–∞–∂–º–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!`,
      );
      this.telegramApiRepository.update(
        { chat_id: ctx.chat.id },
        { authorization: true },
      );
    } else {
      ctx.reply('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—â–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ...');
    }
  }

  async handled_out(ctx): Promise<void> {
    ctx.reply('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–î–∞', callback_data: 'logout' },
            { text: '–ù–µ—Ç', callback_data: 'log' },
          ],
        ],
      },
    });

    this.client.action('logout', async (ctx) => {
      this.telegramApiRepository.update(
        { chat_id: ctx.chat.id.toString() },
        { manager: null, authorization: false },
      );
      ctx.reply('')
    });
  }
}
