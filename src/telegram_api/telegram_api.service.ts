import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, Scenes, session } from 'telegraf';
import { Command } from './classes/command.class';
import { Scene } from './classes/scene.class';
import { MyContext } from './interfaces/context.interface';
import { StartCommand } from './commands/start.command';
import { LeaderboardCommand } from './commands/leaderboard.command';
import { InjectRepository } from '@nestjs/typeorm';
import { Manager } from 'src/managers/entities/manager.entity';
import { Repository } from 'typeorm';
import { TelegramApi } from './entities/telegram_api.entity';
import { AuthCommand } from './commands/authorization.command';
import { MySalesCommand } from './commands/my-sales.command';
import { CongratulationCommand } from './commands/congratulation.command';
import { AppealCommand } from './commands/appeal.command';

@Injectable()
export class TelegramApiService {
  public readonly client: Telegraf<MyContext>;
  private commands: Command[] = [];
  private scenes: Scene[] = [];
  private scenesNames: Scenes.WizardScene<MyContext>[] = [];
  public updatedTime: string;
  public managerName: string;

  private readonly logger = new Logger(TelegramApiService.name);

  constructor(
    private readonly configService: ConfigService,
    @InjectRepository(Manager)
    private readonly managersRepository: Repository<Manager>,
    @InjectRepository(TelegramApi)
    private readonly telegramRepository: Repository<TelegramApi>,
  ) {
    this.client = new Telegraf<MyContext>(
      this.configService.get('TELEGRAM_API_KEY'),
    );
  }
  async onApplicationBootstrap() {
    try {
      this.commands = [
        new StartCommand(this.client, this.telegramRepository),
        new LeaderboardCommand(
          this.client,
          this.managersRepository,
          this.telegramRepository,
          this.updatedTime,
        ),
        new AuthCommand(
          this.client,
          this.managersRepository,
          this.telegramRepository,
        ),
        new MySalesCommand(
          this.client,
          this.managersRepository,
          this.telegramRepository,
        ),
        new CongratulationCommand(
          this.client,
          this.configService,
          this.managersRepository,
          this.telegramRepository,
        ),
      ];
      for (const command of this.commands) {
        command.handle();
      }

      this.scenes = [new AppealCommand(this.client)];
      for (const scene of this.scenes) {
        scene.handle();
        this.scenesNames.push(scene.scene);
      }
      const stage = new Scenes.Stage(this.scenesNames);
      this.client.use(session());
      this.client.use(stage.middleware());
      this.client.hears('–ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', (ctx) =>
        ctx.scene.enter('appeal'),
      );

      this.client.launch();
      this.logger.log('Telegram Bot initialized');
      const clients = await this.telegramRepository.find();
      for (const _client of clients) {
        if (_client.manager && _client.authorization === false) {
          this.client.telegram.sendMessage(
            _client.chat_id,
            '–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /auth',
          );
        }
        // this.client.telegram.sendMessage(
        //   _client.chat_id,
        //   '<b>–í—Å–µ–º –±–æ–ª—å—à–æ–π –ø—Ä–∏–≤–µ—Ç!</b>\n\n' +
        //   '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n' +
        //   '<b>- –í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è, —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</b> –ï—Å–ª–∏ —É –≤–∞—Å —Å–ª–æ–º–∞–ª–æ—Å—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ/—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ –∏–ª–∏ –µ—Å—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –µ—é! –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—é.\n' +
        //   '<b>- –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</b> –°–µ–π—á–∞—Å –ø—Ä–æ–∏–∑–æ–≤–¥–∏—Ç—Å—è —Ñ–∏–∫—Å –¥—É–±–ª–µ–π –∏–º—ë–Ω —Ç–∞–∫–∏—Ö –∫–∞–∫ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –∏ –î–∏–∞–Ω–∞. –ù–∞ –Ω–∏—Ö –≤—Å–µ –µ—â–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Å–±–æ–π, –Ω–æ —è —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —ç—Ç–∏–º –∏ –æ–±–µ—â–∞—é –ø–æ—Ñ–∏–∫—Å–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n' +
        //   '\n–¢–∞–∫–∂–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏–π –≤ —Ä–µ–∞–ª-—Ç–∞–π–º–µ. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–º–∞–Ω–¥–æ–π /start',
        //   { parse_mode: 'HTML' },
        // );
      }
    } catch (error) {}
  }

  async sendUpdate(managerName: string, profit: string) {
    this.managerName = managerName;
    const clients = await this.telegramRepository.find();
    for (const _client of clients) {
      this.client.telegram.sendMessage(
        _client.chat_id,
        `üéâ<b>${managerName}</b> –∑–∞–∫—Ä—ã–ª(–∞) –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å—É–º–º—É <b>${profit}</b>`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ü–æ–∑–¥—Ä–∞–≤–∏—Ç—å‚ù§Ô∏è', callback_data: 'cb_congratulation' }],
            ],
          },
          parse_mode: 'HTML',
        },
      );
    }
  }
}
